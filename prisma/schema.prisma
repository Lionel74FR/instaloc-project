// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

model Listing {
  id                String   @id @default(cuid())
  title             String
  description       String
  price             Int      // centimes
  surface           Int
  rooms             Int
  bedrooms          Int
  bathrooms         Int
  floor             Int?
  elevator          Boolean?
  address           String
  zipCode           String
  city              String
  country           String
  type              String
  availabilityStart DateTime?
  availabilityEnd   DateTime?
  images            String[]
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade) 
  createdAt         DateTime @default(now())
}

model Document {
  id         String   @id @default(cuid())
  userId     String
  type       String
  fileUrl    String
  verified   Boolean  @default(false)
  uploadedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String    @unique
  emailVerified    DateTime?
  image            String?
  password         String?   // ðŸ‘ˆ pour les comptes classiques
  accounts         Account[]
  sessions         Session[]
  listings         Listing[] // relation 1-n avec les annonces
  documents        Document[]
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  content    String
  sentAt     DateTime @default(now())

  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])

  @@index([senderId, receiverId])
}